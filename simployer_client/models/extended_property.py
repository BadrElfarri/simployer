# coding: utf-8

"""
    HrConnect

    JWT token is required for authorization. Access to the API is granted through Simployer Admin Center: https://admincenter.simployer.com/    Endpoints with pagination support return following headers      x-has-next-page: True (indicates whether there are more records)      x-page: 1 (page numeration starts with 1)      x-page-size: 100 (records per page)      x-total-count: 120 (total number of records)      x-total-pages: 2 (total number of pages)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExtendedProperty(BaseModel):
    """
    Represents an extended property associated with a person.
    """ # noqa: E501
    person_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the person associated with this extended property.", alias="personId")
    property_type_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the property type.", alias="propertyTypeId")
    property_value_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the property value.", alias="propertyValueId")
    property_type: Optional[StrictStr] = Field(default=None, description="Type of the extended property.", alias="propertyType")
    property_value: Optional[StrictStr] = Field(default=None, description="Value of the extended property.", alias="propertyValue")
    __properties: ClassVar[List[str]] = ["personId", "propertyTypeId", "propertyValueId", "propertyType", "propertyValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtendedProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if property_type (nullable) is None
        # and model_fields_set contains the field
        if self.property_type is None and "property_type" in self.model_fields_set:
            _dict['propertyType'] = None

        # set to None if property_value (nullable) is None
        # and model_fields_set contains the field
        if self.property_value is None and "property_value" in self.model_fields_set:
            _dict['propertyValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtendedProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "personId": obj.get("personId"),
            "propertyTypeId": obj.get("propertyTypeId"),
            "propertyValueId": obj.get("propertyValueId"),
            "propertyType": obj.get("propertyType"),
            "propertyValue": obj.get("propertyValue")
        })
        return _obj


