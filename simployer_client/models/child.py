# coding: utf-8

"""
    HrConnect

    JWT token is required for authorization. Access to the API is granted through Simployer Admin Center: https://admincenter.simployer.com/    Endpoints with pagination support return following headers      x-has-next-page: True (indicates whether there are more records)      x-page: 1 (page numeration starts with 1)      x-page-size: 100 (records per page)      x-total-count: 120 (total number of records)      x-total-pages: 2 (total number of pages)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from simployer_client.models.sex_type import SexType
from typing import Optional, Set
from typing_extensions import Self

class Child(BaseModel):
    """
    Child
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the child.")
    parent_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the parent associated with the child.", alias="parentId")
    name: Optional[StrictStr] = Field(default=None, description="Name of the child.")
    active: Optional[StrictBool] = Field(default=None, description="Indicates whether the child is active.")
    sex: Optional[SexType] = None
    birth_date: Optional[datetime] = Field(default=None, description="Date of birth of the child.", alias="birthDate")
    comment: Optional[StrictStr] = Field(default=None, description="Additional comments about the child.")
    split_care: Optional[StrictBool] = Field(default=None, description="Indicates whether the care of the child is split.", alias="splitCare")
    split_care_percentage: Optional[StrictInt] = Field(default=None, description="Percentage of split care for the child.", alias="splitCarePercentage")
    lives_with_parent: Optional[StrictBool] = Field(default=None, description="Indicates whether the child lives with a parent.", alias="livesWithParent")
    disabled_or_chronically_ill: Optional[StrictBool] = Field(default=None, description="Indicates whether the child is disabled or chronically ill.", alias="disabledOrChronicallyIll")
    step_child: Optional[StrictBool] = Field(default=None, description="Indicates whether the child is a stepchild.", alias="stepChild")
    __properties: ClassVar[List[str]] = ["id", "parentId", "name", "active", "sex", "birthDate", "comment", "splitCare", "splitCarePercentage", "livesWithParent", "disabledOrChronicallyIll", "stepChild"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Child from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if birth_date (nullable) is None
        # and model_fields_set contains the field
        if self.birth_date is None and "birth_date" in self.model_fields_set:
            _dict['birthDate'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Child from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "parentId": obj.get("parentId"),
            "name": obj.get("name"),
            "active": obj.get("active"),
            "sex": obj.get("sex"),
            "birthDate": obj.get("birthDate"),
            "comment": obj.get("comment"),
            "splitCare": obj.get("splitCare"),
            "splitCarePercentage": obj.get("splitCarePercentage"),
            "livesWithParent": obj.get("livesWithParent"),
            "disabledOrChronicallyIll": obj.get("disabledOrChronicallyIll"),
            "stepChild": obj.get("stepChild")
        })
        return _obj


