# coding: utf-8

"""
    HrConnect

    JWT token is required for authorization. Access to the API is granted through Simployer Admin Center: https://admincenter.simployer.com/    Endpoints with pagination support return following headers      x-has-next-page: True (indicates whether there are more records)      x-page: 1 (page numeration starts with 1)      x-page-size: 100 (records per page)      x-total-count: 120 (total number of records)      x-total-pages: 2 (total number of pages)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from simployer_client.models.country_type import CountryType
from simployer_client.models.organization_currency_type import OrganizationCurrencyType
from simployer_client.models.organization_unit_type import OrganizationUnitType
from typing import Optional, Set
from typing_extensions import Self

class OrganizationHierarchy(BaseModel):
    """
    Represents an organization hierarchy.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the organization.")
    sub_type: Optional[OrganizationUnitType] = Field(default=None, alias="subType")
    name: Optional[StrictStr] = Field(default=None, description="Name of the organization.")
    company_number: Optional[StrictStr] = Field(default=None, description="Company number.", alias="companyNumber")
    active: Optional[StrictBool] = Field(default=None, description="Indicates if the organization is active.")
    department_code: Optional[StrictStr] = Field(default=None, description="Department code of the organization.", alias="departmentCode")
    manager_id: Optional[StrictStr] = Field(default=None, description="Manager's identifier of the organization.", alias="managerId")
    parent_organization_id: Optional[StrictStr] = Field(default=None, description="Parent organization identifier.", alias="parentOrganizationId")
    organization_number: Optional[StrictStr] = Field(default=None, description="Organization number.", alias="organizationNumber")
    nace: Optional[StrictStr] = Field(default=None, description="NACE (Nomenclature of Economic Activities) code.")
    system_country: Optional[CountryType] = Field(default=None, alias="systemCountry")
    system_organization_currency: Optional[OrganizationCurrencyType] = Field(default=None, alias="systemOrganizationCurrency")
    sub_organizations: Optional[List[OrganizationHierarchy]] = Field(default=None, description="Sub-organizations within this organization.", alias="subOrganizations")
    __properties: ClassVar[List[str]] = ["id", "subType", "name", "companyNumber", "active", "departmentCode", "managerId", "parentOrganizationId", "organizationNumber", "nace", "systemCountry", "systemOrganizationCurrency", "subOrganizations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationHierarchy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "parent_organization_id",
            "sub_organizations",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sub_organizations (list)
        _items = []
        if self.sub_organizations:
            for _item in self.sub_organizations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subOrganizations'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if company_number (nullable) is None
        # and model_fields_set contains the field
        if self.company_number is None and "company_number" in self.model_fields_set:
            _dict['companyNumber'] = None

        # set to None if department_code (nullable) is None
        # and model_fields_set contains the field
        if self.department_code is None and "department_code" in self.model_fields_set:
            _dict['departmentCode'] = None

        # set to None if manager_id (nullable) is None
        # and model_fields_set contains the field
        if self.manager_id is None and "manager_id" in self.model_fields_set:
            _dict['managerId'] = None

        # set to None if parent_organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_organization_id is None and "parent_organization_id" in self.model_fields_set:
            _dict['parentOrganizationId'] = None

        # set to None if organization_number (nullable) is None
        # and model_fields_set contains the field
        if self.organization_number is None and "organization_number" in self.model_fields_set:
            _dict['organizationNumber'] = None

        # set to None if nace (nullable) is None
        # and model_fields_set contains the field
        if self.nace is None and "nace" in self.model_fields_set:
            _dict['nace'] = None

        # set to None if sub_organizations (nullable) is None
        # and model_fields_set contains the field
        if self.sub_organizations is None and "sub_organizations" in self.model_fields_set:
            _dict['subOrganizations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationHierarchy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "subType": obj.get("subType"),
            "name": obj.get("name"),
            "companyNumber": obj.get("companyNumber"),
            "active": obj.get("active"),
            "departmentCode": obj.get("departmentCode"),
            "managerId": obj.get("managerId"),
            "parentOrganizationId": obj.get("parentOrganizationId"),
            "organizationNumber": obj.get("organizationNumber"),
            "nace": obj.get("nace"),
            "systemCountry": obj.get("systemCountry"),
            "systemOrganizationCurrency": obj.get("systemOrganizationCurrency"),
            "subOrganizations": [OrganizationHierarchy.from_dict(_item) for _item in obj["subOrganizations"]] if obj.get("subOrganizations") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
OrganizationHierarchy.model_rebuild(raise_errors=False)

