# coding: utf-8

"""
    HrConnect

    JWT token is required for authorization. Access to the API is granted through Simployer Admin Center: https://admincenter.simployer.com/    Endpoints with pagination support return following headers      x-has-next-page: True (indicates whether there are more records)      x-page: 1 (page numeration starts with 1)      x-page-size: 100 (records per page)      x-total-count: 120 (total number of records)      x-total-pages: 2 (total number of pages)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from simployer_client.models.address_type import AddressType
from simployer_client.models.country_type import CountryType
from simployer_client.models.unit_type import UnitType
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    Address
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the Address")
    unit_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the unit that address belongs to", alias="unitId")
    unit_type: Optional[UnitType] = Field(default=None, alias="unitType")
    type: Optional[AddressType] = None
    country: Optional[CountryType] = None
    street_name1: Optional[StrictStr] = Field(default=None, description="First line of the address", alias="streetName1")
    street_name2: Optional[StrictStr] = Field(default=None, description="Second line of the address", alias="streetName2")
    street_name3: Optional[StrictStr] = Field(default=None, description="Third line of the address", alias="streetName3")
    postal_code: Optional[StrictStr] = Field(default=None, description="Post code", alias="postalCode")
    postal_place: Optional[StrictStr] = Field(default=None, description="City", alias="postalPlace")
    __properties: ClassVar[List[str]] = ["id", "unitId", "unitType", "type", "country", "streetName1", "streetName2", "streetName3", "postalCode", "postalPlace"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if street_name1 (nullable) is None
        # and model_fields_set contains the field
        if self.street_name1 is None and "street_name1" in self.model_fields_set:
            _dict['streetName1'] = None

        # set to None if street_name2 (nullable) is None
        # and model_fields_set contains the field
        if self.street_name2 is None and "street_name2" in self.model_fields_set:
            _dict['streetName2'] = None

        # set to None if street_name3 (nullable) is None
        # and model_fields_set contains the field
        if self.street_name3 is None and "street_name3" in self.model_fields_set:
            _dict['streetName3'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postalCode'] = None

        # set to None if postal_place (nullable) is None
        # and model_fields_set contains the field
        if self.postal_place is None and "postal_place" in self.model_fields_set:
            _dict['postalPlace'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "unitId": obj.get("unitId"),
            "unitType": obj.get("unitType"),
            "type": obj.get("type"),
            "country": obj.get("country"),
            "streetName1": obj.get("streetName1"),
            "streetName2": obj.get("streetName2"),
            "streetName3": obj.get("streetName3"),
            "postalCode": obj.get("postalCode"),
            "postalPlace": obj.get("postalPlace")
        })
        return _obj


