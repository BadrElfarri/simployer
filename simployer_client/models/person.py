# coding: utf-8

"""
    HrConnect

    JWT token is required for authorization. Access to the API is granted through Simployer Admin Center: https://admincenter.simployer.com/    Endpoints with pagination support return following headers      x-has-next-page: True (indicates whether there are more records)      x-page: 1 (page numeration starts with 1)      x-page-size: 100 (records per page)      x-total-count: 120 (total number of records)      x-total-pages: 2 (total number of pages)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from simployer_client.models.country_type import CountryType
from simployer_client.models.sex_type import SexType
from typing import Optional, Set
from typing_extensions import Self

class Person(BaseModel):
    """
    Represents a person.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the person.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the person.", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the person.", alias="lastName")
    nick_name: Optional[StrictStr] = Field(default=None, description="Nickname of the person.", alias="nickName")
    birthdate: Optional[datetime] = Field(default=None, description="Birthdate of the person.")
    seniority_date: Optional[datetime] = Field(default=None, description="Date indicating the seniority or length of service.", alias="seniorityDate")
    bank_account1: Optional[StrictStr] = Field(default=None, description="First bank account number.", alias="bankAccount1")
    iban1: Optional[StrictStr] = Field(default=None, description="International Bank Account Number (IBAN) associated with the first bank account.")
    bank_account2: Optional[StrictStr] = Field(default=None, description="Second bank account number.", alias="bankAccount2")
    iban2: Optional[StrictStr] = Field(default=None, description="International Bank Account Number (IBAN) associated with the second bank account.")
    bank_country1: Optional[CountryType] = Field(default=None, alias="bankCountry1")
    bank_country2: Optional[CountryType] = Field(default=None, alias="bankCountry2")
    sex: Optional[SexType] = None
    nationality: Optional[CountryType] = None
    active: Optional[StrictBool] = Field(default=None, description="Indicates if the person is active.")
    affiliated_organization_id: Optional[StrictStr] = Field(default=None, description="Affiliated organization identifier of the person.", alias="affiliatedOrganizationId")
    primary_phone: Optional[StrictStr] = Field(default=None, description="Primary phone number of the person.", alias="primaryPhone")
    primary_email: Optional[StrictStr] = Field(default=None, description="Primary email address of the person.", alias="primaryEmail")
    __properties: ClassVar[List[str]] = ["id", "firstName", "lastName", "nickName", "birthdate", "seniorityDate", "bankAccount1", "iban1", "bankAccount2", "iban2", "bankCountry1", "bankCountry2", "sex", "nationality", "active", "affiliatedOrganizationId", "primaryPhone", "primaryEmail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Person from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active",
            "affiliated_organization_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if nick_name (nullable) is None
        # and model_fields_set contains the field
        if self.nick_name is None and "nick_name" in self.model_fields_set:
            _dict['nickName'] = None

        # set to None if birthdate (nullable) is None
        # and model_fields_set contains the field
        if self.birthdate is None and "birthdate" in self.model_fields_set:
            _dict['birthdate'] = None

        # set to None if seniority_date (nullable) is None
        # and model_fields_set contains the field
        if self.seniority_date is None and "seniority_date" in self.model_fields_set:
            _dict['seniorityDate'] = None

        # set to None if bank_account1 (nullable) is None
        # and model_fields_set contains the field
        if self.bank_account1 is None and "bank_account1" in self.model_fields_set:
            _dict['bankAccount1'] = None

        # set to None if iban1 (nullable) is None
        # and model_fields_set contains the field
        if self.iban1 is None and "iban1" in self.model_fields_set:
            _dict['iban1'] = None

        # set to None if bank_account2 (nullable) is None
        # and model_fields_set contains the field
        if self.bank_account2 is None and "bank_account2" in self.model_fields_set:
            _dict['bankAccount2'] = None

        # set to None if iban2 (nullable) is None
        # and model_fields_set contains the field
        if self.iban2 is None and "iban2" in self.model_fields_set:
            _dict['iban2'] = None

        # set to None if primary_phone (nullable) is None
        # and model_fields_set contains the field
        if self.primary_phone is None and "primary_phone" in self.model_fields_set:
            _dict['primaryPhone'] = None

        # set to None if primary_email (nullable) is None
        # and model_fields_set contains the field
        if self.primary_email is None and "primary_email" in self.model_fields_set:
            _dict['primaryEmail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Person from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "nickName": obj.get("nickName"),
            "birthdate": obj.get("birthdate"),
            "seniorityDate": obj.get("seniorityDate"),
            "bankAccount1": obj.get("bankAccount1"),
            "iban1": obj.get("iban1"),
            "bankAccount2": obj.get("bankAccount2"),
            "iban2": obj.get("iban2"),
            "bankCountry1": obj.get("bankCountry1"),
            "bankCountry2": obj.get("bankCountry2"),
            "sex": obj.get("sex"),
            "nationality": obj.get("nationality"),
            "active": obj.get("active"),
            "affiliatedOrganizationId": obj.get("affiliatedOrganizationId"),
            "primaryPhone": obj.get("primaryPhone"),
            "primaryEmail": obj.get("primaryEmail")
        })
        return _obj


